{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eswar Narayana\\\\Desktop\\\\Eye Hospital\\\\frontend\\\\src\\\\components\\\\PatientRegistration.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, AppBar, Toolbar, Typography, Button, Container, Card, CardContent, TextField, Grid, Alert, Paper, List, ListItem, ListItemText, ListItemSecondaryAction, IconButton, Chip, Dialog, DialogTitle, DialogContent, DialogActions, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport { ArrowBack, PersonAdd, Print, Refresh, CheckCircle } from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientRegistration = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const [formData, setFormData] = useState({\n    name: '',\n    age: '',\n    phone: ''\n  });\n  const [patients, setPatients] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState('');\n  const [error, setError] = useState('');\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const [opdDialogOpen, setOpdDialogOpen] = useState(false);\n  const [selectedOpd, setSelectedOpd] = useState('');\n  const opdTypes = [{\n    value: 'opd1',\n    label: 'OPD 1'\n  }, {\n    value: 'opd2',\n    label: 'OPD 2'\n  }, {\n    value: 'opd3',\n    label: 'OPD 3'\n  }];\n  useEffect(() => {\n    fetchPatients();\n  }, []);\n  const fetchPatients = async () => {\n    try {\n      const response = await axios.get('/api/patients');\n      setPatients(response.data);\n    } catch (error) {\n      console.error('Failed to fetch patients:', error);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      const response = await axios.post('/api/patients/register', {\n        name: formData.name,\n        age: parseInt(formData.age),\n        phone: formData.phone || null\n      });\n      setSuccess(`Patient registered successfully! Token: ${response.data.token_number}`);\n      setFormData({\n        name: '',\n        age: '',\n        phone: ''\n      });\n      fetchPatients();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Registration failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAllocateOpd = patient => {\n    setSelectedPatient(patient);\n    setOpdDialogOpen(true);\n  };\n  const confirmOpdAllocation = async () => {\n    if (!selectedPatient || !selectedOpd) return;\n    try {\n      const response = await axios.post(`/api/patients/${selectedPatient.id}/allocate-opd`, {\n        opd_type: selectedOpd\n      });\n      setSuccess(`Patient allocated to ${selectedOpd.toUpperCase()}. Queue position: ${response.data.queue_position}`);\n      setOpdDialogOpen(false);\n      setSelectedPatient(null);\n      setSelectedOpd('');\n      fetchPatients();\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'OPD allocation failed');\n    }\n  };\n  const getStatusColor = status => {\n    const statusColors = {\n      pending: 'warning',\n      in: 'info',\n      dilated: 'secondary',\n      referred: 'error',\n      end_visit: 'success'\n    };\n    return statusColors[status] || 'default';\n  };\n  const getStatusLabel = status => {\n    const statusLabels = {\n      pending: 'Pending',\n      in: 'In OPD',\n      dilated: 'Dilated',\n      referred: 'Referred',\n      end_visit: 'Completed'\n    };\n    return statusLabels[status] || status;\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          edge: \"start\",\n          color: \"inherit\",\n          onClick: () => navigate('/dashboard'),\n          sx: {\n            mr: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(ArrowBack, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"div\",\n          sx: {\n            flexGrow: 1\n          },\n          children: \"Patient Registration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"inherit\",\n          onClick: fetchPatients,\n          startIcon: /*#__PURE__*/_jsxDEV(Refresh, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 70\n          }, this),\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        mt: 4,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                gutterBottom: true,\n                children: \"Register New Patient\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n                severity: \"error\",\n                sx: {\n                  mb: 2\n                },\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n                severity: \"success\",\n                sx: {\n                  mb: 2\n                },\n                children: success\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                component: \"form\",\n                onSubmit: handleSubmit,\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  margin: \"normal\",\n                  required: true,\n                  fullWidth: true,\n                  id: \"name\",\n                  label: \"Patient Name\",\n                  name: \"name\",\n                  value: formData.name,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  margin: \"normal\",\n                  required: true,\n                  fullWidth: true,\n                  id: \"age\",\n                  label: \"Age\",\n                  name: \"age\",\n                  type: \"number\",\n                  value: formData.age,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  margin: \"normal\",\n                  fullWidth: true,\n                  id: \"phone\",\n                  label: \"Phone Number\",\n                  name: \"phone\",\n                  value: formData.phone,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  fullWidth: true,\n                  variant: \"contained\",\n                  sx: {\n                    mt: 3,\n                    mb: 2\n                  },\n                  disabled: loading,\n                  startIcon: /*#__PURE__*/_jsxDEV(PersonAdd, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 232,\n                    columnNumber: 32\n                  }, this),\n                  children: loading ? 'Registering...' : 'Register Patient'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                gutterBottom: true,\n                children: \"Recent Patients\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(List, {\n                children: patients.slice(0, 10).map(patient => /*#__PURE__*/_jsxDEV(ListItem, {\n                  divider: true,\n                  children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: `${patient.token_number} - ${patient.name}`,\n                    secondary: `Age: ${patient.age} | Status: ${getStatusLabel(patient.current_status)}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                    children: [/*#__PURE__*/_jsxDEV(Chip, {\n                      label: getStatusLabel(patient.current_status),\n                      color: getStatusColor(patient.current_status),\n                      size: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 256,\n                      columnNumber: 25\n                    }, this), !patient.allocated_opd && /*#__PURE__*/_jsxDEV(IconButton, {\n                      edge: \"end\",\n                      onClick: () => handleAllocateOpd(patient),\n                      color: \"primary\",\n                      children: /*#__PURE__*/_jsxDEV(PersonAdd, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 267,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 262,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 23\n                  }, this)]\n                }, patient.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                gutterBottom: true,\n                children: \"All Patients\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(List, {\n                children: patients.map(patient => /*#__PURE__*/_jsxDEV(ListItem, {\n                  divider: true,\n                  children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: `${patient.token_number} - ${patient.name}`,\n                    secondary: `Age: ${patient.age} | Phone: ${patient.phone || 'N/A'} | Registered: ${new Date(patient.registration_time).toLocaleString()}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      gap: 1,\n                      children: [/*#__PURE__*/_jsxDEV(Chip, {\n                        label: getStatusLabel(patient.current_status),\n                        color: getStatusColor(patient.current_status),\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 294,\n                        columnNumber: 27\n                      }, this), patient.allocated_opd && /*#__PURE__*/_jsxDEV(Chip, {\n                        label: patient.allocated_opd.toUpperCase(),\n                        color: \"primary\",\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 300,\n                        columnNumber: 29\n                      }, this), !patient.allocated_opd && /*#__PURE__*/_jsxDEV(IconButton, {\n                        edge: \"end\",\n                        onClick: () => handleAllocateOpd(patient),\n                        color: \"primary\",\n                        children: /*#__PURE__*/_jsxDEV(PersonAdd, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 312,\n                          columnNumber: 31\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 307,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 293,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 23\n                  }, this)]\n                }, patient.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: opdDialogOpen,\n        onClose: () => setOpdDialogOpen(false),\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Allocate OPD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            gutterBottom: true,\n            children: [\"Patient: \", selectedPatient === null || selectedPatient === void 0 ? void 0 : selectedPatient.name, \" (\", selectedPatient === null || selectedPatient === void 0 ? void 0 : selectedPatient.token_number, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Select OPD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: selectedOpd,\n              onChange: e => setSelectedOpd(e.target.value),\n              label: \"Select OPD\",\n              children: opdTypes.map(opd => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: opd.value,\n                children: opd.label\n              }, opd.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setOpdDialogOpen(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: confirmOpdAllocation,\n            variant: \"contained\",\n            children: \"Allocate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientRegistration, \"Y2jtDS7azq6IyWPDGUu+UE8IYBE=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = PatientRegistration;\nexport default PatientRegistration;\nvar _c;\n$RefreshReg$(_c, \"PatientRegistration\");","map":{"version":3,"names":["React","useState","useEffect","Box","AppBar","Toolbar","Typography","Button","Container","Card","CardContent","TextField","Grid","Alert","Paper","List","ListItem","ListItemText","ListItemSecondaryAction","IconButton","Chip","Dialog","DialogTitle","DialogContent","DialogActions","FormControl","InputLabel","Select","MenuItem","ArrowBack","PersonAdd","Print","Refresh","CheckCircle","useNavigate","useAuth","axios","jsxDEV","_jsxDEV","PatientRegistration","_s","navigate","user","formData","setFormData","name","age","phone","patients","setPatients","loading","setLoading","success","setSuccess","error","setError","selectedPatient","setSelectedPatient","opdDialogOpen","setOpdDialogOpen","selectedOpd","setSelectedOpd","opdTypes","value","label","fetchPatients","response","get","data","console","handleInputChange","e","target","prev","handleSubmit","preventDefault","post","parseInt","token_number","_error$response","_error$response$data","detail","handleAllocateOpd","patient","confirmOpdAllocation","id","opd_type","toUpperCase","queue_position","_error$response2","_error$response2$data","getStatusColor","status","statusColors","pending","in","dilated","referred","end_visit","getStatusLabel","statusLabels","sx","flexGrow","children","position","edge","color","onClick","mr","fileName","_jsxFileName","lineNumber","columnNumber","variant","component","startIcon","maxWidth","mt","mb","container","spacing","item","xs","md","gutterBottom","severity","onSubmit","margin","required","fullWidth","onChange","type","disabled","slice","map","divider","primary","secondary","current_status","size","allocated_opd","Date","registration_time","toLocaleString","display","alignItems","gap","open","onClose","opd","_c","$RefreshReg$"],"sources":["C:/Users/Eswar Narayana/Desktop/Eye Hospital/frontend/src/components/PatientRegistration.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Grid,\r\n  Alert,\r\n  Paper,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack,\r\n  PersonAdd,\r\n  Print,\r\n  Refresh,\r\n  CheckCircle,\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport axios from 'axios';\r\n\r\nconst PatientRegistration = () => {\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    age: '',\r\n    phone: '',\r\n  });\r\n  const [patients, setPatients] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [selectedPatient, setSelectedPatient] = useState(null);\r\n  const [opdDialogOpen, setOpdDialogOpen] = useState(false);\r\n  const [selectedOpd, setSelectedOpd] = useState('');\r\n\r\n  const opdTypes = [\r\n    { value: 'opd1', label: 'OPD 1' },\r\n    { value: 'opd2', label: 'OPD 2' },\r\n    { value: 'opd3', label: 'OPD 3' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetchPatients();\r\n  }, []);\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await axios.get('/api/patients');\r\n      setPatients(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to fetch patients:', error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n    setSuccess('');\r\n\r\n    try {\r\n      const response = await axios.post('/api/patients/register', {\r\n        name: formData.name,\r\n        age: parseInt(formData.age),\r\n        phone: formData.phone || null,\r\n      });\r\n\r\n      setSuccess(`Patient registered successfully! Token: ${response.data.token_number}`);\r\n      setFormData({ name: '', age: '', phone: '' });\r\n      fetchPatients();\r\n    } catch (error) {\r\n      setError(error.response?.data?.detail || 'Registration failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAllocateOpd = (patient) => {\r\n    setSelectedPatient(patient);\r\n    setOpdDialogOpen(true);\r\n  };\r\n\r\n  const confirmOpdAllocation = async () => {\r\n    if (!selectedPatient || !selectedOpd) return;\r\n\r\n    try {\r\n      const response = await axios.post(`/api/patients/${selectedPatient.id}/allocate-opd`, {\r\n        opd_type: selectedOpd,\r\n      });\r\n\r\n      setSuccess(`Patient allocated to ${selectedOpd.toUpperCase()}. Queue position: ${response.data.queue_position}`);\r\n      setOpdDialogOpen(false);\r\n      setSelectedPatient(null);\r\n      setSelectedOpd('');\r\n      fetchPatients();\r\n    } catch (error) {\r\n      setError(error.response?.data?.detail || 'OPD allocation failed');\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    const statusColors = {\r\n      pending: 'warning',\r\n      in: 'info',\r\n      dilated: 'secondary',\r\n      referred: 'error',\r\n      end_visit: 'success',\r\n    };\r\n    return statusColors[status] || 'default';\r\n  };\r\n\r\n  const getStatusLabel = (status) => {\r\n    const statusLabels = {\r\n      pending: 'Pending',\r\n      in: 'In OPD',\r\n      dilated: 'Dilated',\r\n      referred: 'Referred',\r\n      end_visit: 'Completed',\r\n    };\r\n    return statusLabels[status] || status;\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            onClick={() => navigate('/dashboard')}\r\n            sx={{ mr: 2 }}\r\n          >\r\n            <ArrowBack />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n            Patient Registration\r\n          </Typography>\r\n          <Button color=\"inherit\" onClick={fetchPatients} startIcon={<Refresh />}>\r\n            Refresh\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n        <Grid container spacing={3}>\r\n          {/* Registration Form */}\r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Register New Patient\r\n                </Typography>\r\n                \r\n                {error && (\r\n                  <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                    {error}\r\n                  </Alert>\r\n                )}\r\n                \r\n                {success && (\r\n                  <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                    {success}\r\n                  </Alert>\r\n                )}\r\n\r\n                <Box component=\"form\" onSubmit={handleSubmit}>\r\n                  <TextField\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"name\"\r\n                    label=\"Patient Name\"\r\n                    name=\"name\"\r\n                    value={formData.name}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <TextField\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"age\"\r\n                    label=\"Age\"\r\n                    name=\"age\"\r\n                    type=\"number\"\r\n                    value={formData.age}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <TextField\r\n                    margin=\"normal\"\r\n                    fullWidth\r\n                    id=\"phone\"\r\n                    label=\"Phone Number\"\r\n                    name=\"phone\"\r\n                    value={formData.phone}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    sx={{ mt: 3, mb: 2 }}\r\n                    disabled={loading}\r\n                    startIcon={<PersonAdd />}\r\n                  >\r\n                    {loading ? 'Registering...' : 'Register Patient'}\r\n                  </Button>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* Patient List */}\r\n          <Grid item xs={12} md={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Recent Patients\r\n                </Typography>\r\n                <List>\r\n                  {patients.slice(0, 10).map((patient) => (\r\n                    <ListItem key={patient.id} divider>\r\n                      <ListItemText\r\n                        primary={`${patient.token_number} - ${patient.name}`}\r\n                        secondary={`Age: ${patient.age} | Status: ${getStatusLabel(patient.current_status)}`}\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Chip\r\n                          label={getStatusLabel(patient.current_status)}\r\n                          color={getStatusColor(patient.current_status)}\r\n                          size=\"small\"\r\n                        />\r\n                        {!patient.allocated_opd && (\r\n                          <IconButton\r\n                            edge=\"end\"\r\n                            onClick={() => handleAllocateOpd(patient)}\r\n                            color=\"primary\"\r\n                          >\r\n                            <PersonAdd />\r\n                          </IconButton>\r\n                        )}\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          {/* All Patients Table */}\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  All Patients\r\n                </Typography>\r\n                <List>\r\n                  {patients.map((patient) => (\r\n                    <ListItem key={patient.id} divider>\r\n                      <ListItemText\r\n                        primary={`${patient.token_number} - ${patient.name}`}\r\n                        secondary={`Age: ${patient.age} | Phone: ${patient.phone || 'N/A'} | Registered: ${new Date(patient.registration_time).toLocaleString()}`}\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n                          <Chip\r\n                            label={getStatusLabel(patient.current_status)}\r\n                            color={getStatusColor(patient.current_status)}\r\n                            size=\"small\"\r\n                          />\r\n                          {patient.allocated_opd && (\r\n                            <Chip\r\n                              label={patient.allocated_opd.toUpperCase()}\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                            />\r\n                          )}\r\n                          {!patient.allocated_opd && (\r\n                            <IconButton\r\n                              edge=\"end\"\r\n                              onClick={() => handleAllocateOpd(patient)}\r\n                              color=\"primary\"\r\n                            >\r\n                              <PersonAdd />\r\n                            </IconButton>\r\n                          )}\r\n                        </Box>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* OPD Allocation Dialog */}\r\n        <Dialog open={opdDialogOpen} onClose={() => setOpdDialogOpen(false)}>\r\n          <DialogTitle>Allocate OPD</DialogTitle>\r\n          <DialogContent>\r\n            <Typography variant=\"body1\" gutterBottom>\r\n              Patient: {selectedPatient?.name} ({selectedPatient?.token_number})\r\n            </Typography>\r\n            <FormControl fullWidth sx={{ mt: 2 }}>\r\n              <InputLabel>Select OPD</InputLabel>\r\n              <Select\r\n                value={selectedOpd}\r\n                onChange={(e) => setSelectedOpd(e.target.value)}\r\n                label=\"Select OPD\"\r\n              >\r\n                {opdTypes.map((opd) => (\r\n                  <MenuItem key={opd.value} value={opd.value}>\r\n                    {opd.label}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setOpdDialogOpen(false)}>Cancel</Button>\r\n            <Button onClick={confirmOpdAllocation} variant=\"contained\">\r\n              Allocate\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PatientRegistration;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
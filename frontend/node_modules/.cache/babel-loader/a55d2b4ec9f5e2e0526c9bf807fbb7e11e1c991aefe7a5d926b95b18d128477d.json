{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eswar Narayana\\\\Desktop\\\\Eye Hospital\\\\frontend\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    const newSocket = io('http://localhost:8000', {\n      transports: ['websocket']\n    });\n    newSocket.on('connect', () => {\n      console.log('Connected to server');\n      setConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      setConnected(false);\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  const joinOPD = opdType => {\n    if (socket) {\n      socket.emit('join_opd', {\n        opd_type: opdType\n      });\n    }\n  };\n  const leaveOPD = opdType => {\n    if (socket) {\n      socket.emit('leave_opd', {\n        opd_type: opdType\n      });\n    }\n  };\n  const joinDisplay = () => {\n    if (socket) {\n      socket.emit('join_display');\n    }\n  };\n  const leaveDisplay = () => {\n    if (socket) {\n      socket.emit('leave_display');\n    }\n  };\n  const onQueueUpdate = callback => {\n    if (socket) {\n      socket.on('queue_update', callback);\n    }\n  };\n  const onPatientStatusUpdate = callback => {\n    if (socket) {\n      socket.on('patient_status_update', callback);\n    }\n  };\n  const onDisplayUpdate = callback => {\n    if (socket) {\n      socket.on('display_update', callback);\n    }\n  };\n  const onPatientReferral = callback => {\n    if (socket) {\n      socket.on('patient_referral', callback);\n    }\n  };\n  const removeAllListeners = () => {\n    if (socket) {\n      socket.removeAllListeners();\n    }\n  };\n  const value = {\n    socket,\n    connected,\n    joinOPD,\n    leaveOPD,\n    joinDisplay,\n    leaveDisplay,\n    onQueueUpdate,\n    onPatientStatusUpdate,\n    onDisplayUpdate,\n    onPatientReferral,\n    removeAllListeners\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"m6p1sV3rwp2XZjgv4y9FqMzBcks=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","connected","setConnected","newSocket","transports","on","console","log","close","joinOPD","opdType","emit","opd_type","leaveOPD","joinDisplay","leaveDisplay","onQueueUpdate","callback","onPatientStatusUpdate","onDisplayUpdate","onPatientReferral","removeAllListeners","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Eswar Narayana/Desktop/Eye Hospital/frontend/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [connected, setConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const newSocket = io('http://localhost:8000', {\r\n      transports: ['websocket'],\r\n    });\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('Connected to server');\r\n      setConnected(true);\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Disconnected from server');\r\n      setConnected(false);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  const joinOPD = (opdType) => {\r\n    if (socket) {\r\n      socket.emit('join_opd', { opd_type: opdType });\r\n    }\r\n  };\r\n\r\n  const leaveOPD = (opdType) => {\r\n    if (socket) {\r\n      socket.emit('leave_opd', { opd_type: opdType });\r\n    }\r\n  };\r\n\r\n  const joinDisplay = () => {\r\n    if (socket) {\r\n      socket.emit('join_display');\r\n    }\r\n  };\r\n\r\n  const leaveDisplay = () => {\r\n    if (socket) {\r\n      socket.emit('leave_display');\r\n    }\r\n  };\r\n\r\n  const onQueueUpdate = (callback) => {\r\n    if (socket) {\r\n      socket.on('queue_update', callback);\r\n    }\r\n  };\r\n\r\n  const onPatientStatusUpdate = (callback) => {\r\n    if (socket) {\r\n      socket.on('patient_status_update', callback);\r\n    }\r\n  };\r\n\r\n  const onDisplayUpdate = (callback) => {\r\n    if (socket) {\r\n      socket.on('display_update', callback);\r\n    }\r\n  };\r\n\r\n  const onPatientReferral = (callback) => {\r\n    if (socket) {\r\n      socket.on('patient_referral', callback);\r\n    }\r\n  };\r\n\r\n  const removeAllListeners = () => {\r\n    if (socket) {\r\n      socket.removeAllListeners();\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    connected,\r\n    joinOPD,\r\n    leaveOPD,\r\n    joinDisplay,\r\n    leaveDisplay,\r\n    onQueueUpdate,\r\n    onPatientStatusUpdate,\r\n    onDisplayUpdate,\r\n    onPatientReferral,\r\n    removeAllListeners,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}